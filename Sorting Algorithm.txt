Selection Sort -


class SelectionSort {  
    public static void main(String[] args) {      
         
        int [] arr = {5,6,2,9,8,4,1,3,7,10}; //Initialize array    
        int min,temp=0; 
        for(int i = 0; i < arr.length; i++) { 

            min=i;		
            for(int j = i + 1; j < arr.length; j++)  // This loop travese whole array                                 {                                          for every elements is matching Duplicates or not 
                                    
                if(arr[j] < arr[min]) 
		 {
		   min=j;	
		 }
	     }
					
                 temp=arr[i];	
                 arr[i]=arr[min];
                 arr[min]=temp;  
								 
            }  
		for(int i = 0; i < arr.length; i++){ //Here all values are  iterated....                                                            
		System.out.println(arr[i]);
		}
    }  
}

*************************************************************************************
Bubble Sort -


class BubbleSort{
           public static void main(String [] args){
		
		int [] arr = {7,12,5,9,8,4};  //6 elements are presents so 5 iterations are avaiable                                                 here for bubble sort......
		
		int temp;
		for(int i=0;i<arr.length;i++){
		for(int j=0;j<arr.length-1;j++){ 
				
		if(arr[j]>arr[j+1]){ //used for comparison of 2 adjacent elements of iteration..
		temp=arr[j];         //arr[j]->1st element
		arr[j]= arr[j+1];    //arr[j+1]->2nd element
		arr[j+1]=temp;
	        }
	      }
		}
		for(int i=0;i<arr.length;i++){
		System.out.println(arr[i]);
		}
	}
}

********************************************************************************************************
Insertion Sort -


class InsertionSort{
      public static void main(String [] args){
		  
		  int [] arr = {6,5,2,1,9,7};
		  
		  int temp,j;
		  for(int i=1;i<arr.length;i++){
			  temp=arr[i];   //temp=5
			  j=i;
			  while(j>0 && arr[j-1]>temp){
		          arr[j]=arr[j-1];

			  j=j-1;   //for 1st j=1-1=0
			  }
			  arr[j]=temp; //arr[0]=temp,   
		  }
		  for(int i=0;i<arr.length;i++){

		  System.out.println(arr[i]);
		  }
	  
	  }
	  
	  }

********************************************************************************************************
Merge Sort - 


class MergeSort{
	
	int[] array;
	int[] tempMergeArr;
	int length;
	
	public static void main(String [] args){
	
	int[] inputArr = {48,38,13,52,19,94,21,68};
	MergeSort ms = new MergeSort();
	ms.sort(inputArr);
	
	for(int i:inputArr)
	{
		System.out.print(i+" ");
	}
	}
	
	public void sort(int inputArr[])
	{
		this.array = inputArr;
		this.length = inputArr.length;
		this.tempMergeArr = new int[length];
		divideArray(0,length-1);
	}
	public void divideArray(int lowerindex, int higherindex)
	{
		if(lowerindex<higherindex)
		{
			int middle = lowerindex+(higherindex-lowerindex)/2;
			
			//It will sort left side of array
			divideArray(lowerindex, middle);
		
		       //It will sort right side of array
			divideArray(middle+1,higherindex);
			
			mergeArray(lowerindex,middle,higherindex);
		}
	}
	public void mergeArray(int lowerindex,int middle,int higherindex)
	{
		for(int i=lowerindex;i<=higherindex;i++)
		{
			tempMergeArr[i]=array[i];
		}
		
		int i=lowerindex;
		int j=middle+1;
		int k=lowerindex;
		
		while(i<=middle && j<=higherindex)
		{
			if(tempMergeArr[i] <= tempMergeArr[j])
			{
				array[k]=tempMergeArr[i];
				i++;
			}
			else
			{
				array[k]=tempMergeArr[j];
				j++;
			}
			k++;
		}
		while(i<=middle)
		{
			array[k]=tempMergeArr[i];
			k++;
			i++;
		}
	}
}














