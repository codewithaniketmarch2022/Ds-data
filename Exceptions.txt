ArithmeticException occurs-

public class ArithmeticExceptionTest {
   public static void main(String[] args) {
      int a = 0, b = 10;
      int c = b/a;
      System.out.println("Value of c is : "+ c);
   }
}


Handling of ArithmeticException as follows - 


   class ArithmeticExceptionTest {
   public static void main(String[] args) {
      int a = 0, b = 10 ;
      int c = 0;
      try {

         c = b/a;

      } catch (ArithmeticException e) {
          // e.printStackTrace();
          System.out.println("Error occurs");

      }
      finally{ //by default execute...
	  System.out.println("Hello");
      }		  
   }
}

*****************************************************************************************
NullPointerExceptions-


class cadc
{
    public static void main (String[] args)
    {
       
        String ptr = null;
 
            if (ptr.equals("gfg"))
                System.out.print("Same");
            else
                System.out.print("Not Same");
        
        
    }
}



-Handled NullPointerExceptions-

class GFG
{
    public static void main (String[] args)
    {
        String ptr = null;
        try
        {
            
            if (ptr.equals("gfg"))
                System.out.print("Same");
            else
                System.out.print("Not Same");
        }
        catch(NullPointerException e)
        {
            System.out.print("NullPointerException Caught");
        }
    }
}

***************************************************************************************** class cast exceptions-

String s = new String("aniket");
object o = (object)s;

****************************************************************************************
ArrayIndexOutOfBoundsException -


public class ArrayIndexOutOfBoundException {  
  
    public static void main(String[] args) {  
    String[] arr = {"Rohit","Shikar","Virat","Dhoni"};   
                                      
    for(int i=0;i<=arr.length;i++) {       
    System.out.println(arr[i]); //So it will throw ArrayIndexOutOfBoundException at                                   iteration 4  
  
        }  
  
    }  
  
}    

*****************************************************************************************
Errors - OutOfMemoryError - 


public class OutOfMemoryErrorExample {
    public static void main(String[] args) {
        Integer[] myArray = new Integer[1000 * 1000 * 1000];
    }
}



Handling code for OutOfMemoryError - 

public class OutOfMemoryErrorExample {
    public void createArray(int size) {
        try {
            Integer[] myArray = new Integer[size];
        } catch (OutOfMemoryError e{
            
            System.err.println("Array size too large");
            System.err.println("Max JVM memory: " + Runtime.getRuntime().maxMemory());
        }
    }

    public static void main(String[] args) {
        OutOfMemoryErrorExample e = new OutOfMemoryErrorExample();
        oomee.createArray(1000 * 1000 * 1000);
    }
}

*****************************************************************************************
stackOverFlow Error -
 

public class StackOverflowErrorClass { 
    static int i = 0; 
  
    // Method to print numbers 
    public static int printNumber(int x) 
    { 
  
        i = i + 2; 
        System.out.println(i); 
        return i + printNumber(i + 2); 
    } 
  
    public static void main(String[] args) 
    { 
        // Recursive call without any 
        // terminating condition 
        StackOverflowErrorClass.printNumber(i); 
    } 
} 



handling code for the stackOverFlow Error - 


public class stackOverflow { 
    static int i = 0; 
    public static int printNumber(int x) 
    { 
  
        i = i + 2; 
        System.out.println(i); 
  
        // Terminating condition 
        if (i == 10) 
            return i; 
  
        return i + printNumber(i + 2); 
    } 
  
    public static void main(String[] args) 
    { 
        stackOverflow.printNumber(i); 
    } 
} 

*****************************************************************************************
Customized Exceptions --


class UnderAgeException extends Exception   // Instead of Exception write runtimeexception in case of UncheckedException....
{
    UnderAgeException()
	{
	   super("You are Under Age"); //for calling constructor super is used here......
	}
}


class CustomizedException
{
  public static void main(String [] args) 
  {
  int age=17;
  try
  {
  if(age<18)
  {
    throw new UnderAgeException();
  }
 }
 catch(UnderAgeException e)
 {
    e.printStackTrace();
 }
}
}


















