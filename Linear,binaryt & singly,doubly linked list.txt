Linear search


class LinearSearch {
        static int search(int arr[], int x)  //Function is created..
    {
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == x)
                return i;
        }
        return -1;
    }
 
    // Driver's code
    public static void main(String args[])
    {
        int arr[] = { 2, 3, 4, 10, 40 };
        int x = 40;
 
        // Function call
        int result = search(arr, x); //from here ctrl goes at line 6...
        if (result == -1)
            System.out.print(
                "Element is not present in array");
        else
            System.out.print("Element is present at index "
                             + result);
    }
}

****************************************************************************************************************************
Binary search


class BinarySearch
{
    static int binarySearch(int arr[], int l, int r, int x) //this is function..
    {
        if (r >= l)
        {
            int mid = l + (r - l)/2;
  
            if (arr[mid] == x)
               return mid;
  
            if (arr[mid] > x)
               return binarySearch(arr, l, mid-1, x);
  
            return binarySearch(arr, mid+1, r, x);
        }
  
        // We reach here when element is not present
        //  in array
        return -1;
    }
  
    public static void main(String args[])
    {
       
        int arr[] = {2,3,4,10,40};
        int n = arr.length;
        int x = 10;
        
	int result = binarySearch(arr,0,n-1,x);  // Function call
        if (result == -1)
            System.out.println("Element not present");
        else
            System.out.println("Element found at index " + result);
                                                
    }
}

****************************************************************************************************************************
structure of node-


        Node head;
	static class Node
	{
	int data;
	Node next;
	Node(int d) //constructor...
	{
		data=d;
		next=null;
	}
	}
****************************************************************************************************************************
singly LL-insert at begining...

void insert(int new_data)
    {
	Node new_node = new Node(new_data); //obj is created..
	new_node.next = head;
	head= new_node;	
    }

*****************************************************************************************************************************
singly LL-insert at middle...

void insertAfter(Node prev,int new_data)
{
	if(prev == null)
	{
		System.out.println("Insertion is not possible.");
		return;
	}
	Node new_node = new Node(new_data);
	new_node.next = prev.next;
	prev.next = new_node;
	
}

*****************************************************************************************************************************
singly LL-insert at Last...

void append(int new_data)
{
	Node new_node = new Node(new_data);
	if(head == null)
	{
		head=new_node;
		return;
	}
	new_node.next = null;
	Node n = head;
	while(n.next != null)
	{
		n = n.next;
	}
	n.next = new_node;
	return;
	
}

*****************************************************************************************************************************
singly LL-deletion at begining...


void delete(int key)
{
	Node temp = head; //temp and prev are 2 pointers...
	if(temp.data == key && temp !=null) 
	{
		head = temp.next;
		return;
	}
	
}

*****************************************************************************************************************************
singly LL-deletion at Middle and last...


void delete(int key) //For deletion at middle and last node.....
{
	Node temp = head, prev =null;
	while(temp !=null && temp.data != key)
	{
		prev = temp;
		temp = temp.next;
	}
	if(temp==null)
		{return;}
	prev.next = temp.next; //this type of connections are for middle and last require
}

*****************************************************************************************************************************
singly LL-search operation......


search(Node head,int x)
{
	Node n=head;
	while(n != null)
	{
		if(n.data == x)
			return true;
		n=n.next;	
	}
	return false;
}

//call

if(l1.search(head, 3))
	SOP ( "Found!");
else
	SOP ("Not Found!");

*****************************************************************************************************************************
Count no of nodes in LL-


int count()
{
	Node n=head;
	int count = 0;
	while(n != null)
	{
		count++;
		n=n.next;

	}
	return count;

}

*****************************************************************************************************************************
Recursion - 


int revcount(Node n)
{

if(n == null) // termination cond for recursion....
return 0;  // it will return int to revcount method..

return 1+ revcount(n.next)
}

//call

revcount(head);

*****************************************************************************************************************************
Doubly LL- structure of node...

static class Node
	{
		int data;
		Node next;
		Node prev;
		
		Node(int d)
		{
			data = d;
			next = null;
			prev = null;
		}
	}

*****************************************************************************************************************************
Doubly LL- Insert at begining.........


void insert(int new_data)
{
  Node new_node = new Node(new_data)
  new_node.next = head;
  new_node.prev=null;
  if(head != null )
    head.prev = new_node;
  head = new_node;

}

*****************************************************************************************************************************
Doubly LL- Insert at middle.........


void insertAfter(Node prev,int new_data)
{
  if(prev = null)
    {return;}
  Node new_node = new Node(new_data);
  new_node.next = prev.next;
  prev.next = new_node;
  new_node.prev = prev;
  new_node.next.prev = new_node;

}

*****************************************************************************************************************************
Doubly LL- Insert at Last.........


void append(int new_data)
{
  Node new_node = new Node(new_data);
  Node n = head;
  new_node.next = null;
  if(head == null)
  {
    new_node.prev = null;
    head = new_node;
    return;

  }
  while(n.next != null)
  {
    n=n.next;
  }
  n.next = new_node;
  new_node.prev = n;

}

*****************************************************************************************************************************
Doubly LL- Deletion at begining.........


void delete(Node n)
 {

    if (head == null)
	return;

    if (head == n)
    {
      head=n.next;
    }
}

*****************************************************************************************************************************
Doubly LL- Deletion at last........


Node temp=tail;  //traverse from end....
temp=temp.prev;
temp.next=null;
tail=temp; //It pointing a last node value..

*****************************************************************************************************************************	Doubly LL- Deletion at Middle........		


scanf("%d",&pos); // give position of deletion..
temp=head;

for(int i=0;i<pos-1;i++)
  {
    temp=temp.next;
  }
  temp.next=temp.next.next;
  temp.next.prev=temp;

*****************************************************************************************************************************
print the Doubly linked list reverse order - 


while(p.next!=null)
{
  p=p.next;
}
while(p!=null)
{
system.out.println(p.data);
p=p.prev;
}

*********************************************************************************************






















